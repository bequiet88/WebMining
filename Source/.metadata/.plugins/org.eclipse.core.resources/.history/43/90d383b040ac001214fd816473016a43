package contentAnalysis;

import java.util.List;
import java.util.Properties;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.CoreAnnotations.PartOfSpeechAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.SentencesAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.TextAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.TokensAnnotation;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

public class Sentence {
	private String sentence = null;
	public String getSentence() 
	{
		return sentence;
	}

	private String[] words;
	public String[] getWords() 
	{
		return words;
	}

	private String[] posTags;
	public String[] getPosTags() 
	{
		return posTags;
	}
	
	public Sentence(String sentence) 
	{
		super();
		this.sentence = sentence;
		this.processWords();
	}
	
	private void processWords()
	{
	    StanfordCoreNLP pipeline;
	    Properties props = new Properties();
	    props.put("annotators", "tokenize, ssplit, pos, lemma");
	    pipeline = new StanfordCoreNLP(props);

	    // read data
	    String text = this.sentence;
	    // create an empty Annotation just with the given text
	    Annotation document = new Annotation(text);
	    // run all Annotators on this text
	    pipeline.annotate(document);
	    // these are all the sentences in this document
	    List<CoreMap> sentences = document.get(SentencesAnnotation.class);
	   
	    for(CoreMap sentence: sentences) 
	    {
	    	this.words = new String[sentence.get(TokensAnnotation.class).size()];
	    	this.posTags = new String[sentence.get(TokensAnnotation.class).size()];
	    	int index = 0;
	
	    	/*
	    	 * Iterate over all tokens in sentence, 
	    	 * put information into two arrays (one for words, one for posTags)
	    	 */
	    	for (CoreLabel token: sentence.get(TokensAnnotation.class)) 
	    	{
	    		String word = token.get(TextAnnotation.class);  
	    		String posTag = token.get(PartOfSpeechAnnotation.class); 
	    		
	    		this.words[index] = word;
	    		this.posTags[index] = posTag;
	    		index ++;
	    	}	      	
	    }
	}
	
	public void writeToFile(String fileName, boolean append) throws IOException
	{
		
	}
}
